<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: twitter | Matt Kelsey]]></title>
  <link href="http://kelsmj.github.com/blog/categories/twitter/atom.xml" rel="self"/>
  <link href="http://kelsmj.github.com/"/>
  <updated>2013-05-12T10:25:17-04:00</updated>
  <id>http://kelsmj.github.com/</id>
  <author>
    <name><![CDATA[Matt Kelsey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Authorizing and Signing a Twitter API Call using Python]]></title>
    <link href="http://kelsmj.github.com/2013/05/01/authorizing-and-signing-a-twitter-api-call-using-python/"/>
    <updated>2013-05-01T11:10:00-04:00</updated>
    <id>http://kelsmj.github.com/2013/05/01/authorizing-and-signing-a-twitter-api-call-using-python</id>
    <content type="html"><![CDATA[<p>I was reading through Twitter’s excellent documenation on <a href="https://dev.twitter.com/docs/auth/authorizing-request">Authorizing</a> and <a href="https://dev.twitter.com/docs/auth/creating-signature">Signing</a> an API request and decided I wanted to give implementing it a shot.  The goal was to use as few external python libraries as possible.  The only library I ended up using was the wonderful <a href="http://docs.python-requests.org/en/latest/">Requests: HTTP for Humans</a> library to actually make the call to twitter to get my user timeline. The git repo for this is located <a href="https://github.com/kelsmj/twitter_signature">here</a>.</p>

<p>Below is an explanation of the code I wrote, in order to accomplish this.  I am assuming one would know how to setup and get the needed keys for a twitter application.</p>

<p>The code is assuming you will have a ‘settings.cfg’ file that houses your twitter_consumer_secret, twitter_consumer_key, access_token, and access_token_secret.</p>

<p>It looks like:</p>

<p><code>
[Keys]
twitter_consumer_secret: YOUR_CONSUMER_SECRET
twitter_consumer_key: YOUR_CONSUMER_KEY
access_token: YOUR_ACCESS_TOKEN
access_token_secret: YOUR_ACCESS_TOKEN_SECRET
</code></p>

<p>First off, lets look at the main part of the program.  The first part of the program just sets up some configuration variables.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="err">‘</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">’</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">#Read the Config File to get the twitter keys and tokens</span>
</span><span class='line'>  <span class="n">config</span> <span class="o">=</span> <span class="n">ConfigParser</span><span class="o">.</span><span class="n">RawConfigParser</span><span class="p">()</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="err">‘</span><span class="n">settings</span><span class="o">.</span><span class="n">cfg</span><span class="err">’</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">#method, url and parameters to call</span>
</span><span class='line'>  <span class="n">method</span> <span class="o">=</span> <span class="err">“</span><span class="n">get</span><span class="err">”</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="err">“</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">api</span><span class="o">.</span><span class="n">twitter</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="mf">1.1</span><span class="o">/</span><span class="n">statuses</span><span class="o">/</span><span class="n">user_timeline</span><span class="o">.</span><span class="n">json</span><span class="err">”</span>
</span><span class='line'>  <span class="n">url_parameters</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="err">‘</span><span class="n">exclude_replies</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">true</span><span class="err">’</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">#configuration hash for the keys</span>
</span><span class='line'>  <span class="n">keys</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="err">“</span><span class="n">twitter_consumer_secret</span><span class="err">”</span><span class="p">:</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span>
</span><span class='line'>          <span class="err">‘</span><span class="n">Keys</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">twitter_consumer_secret</span><span class="err">’</span><span class="p">),</span>
</span><span class='line'>      <span class="err">“</span><span class="n">twitter_consumer_key</span><span class="err">”</span><span class="p">:</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="err">‘</span><span class="n">Keys</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">twitter_consumer_key</span><span class="err">’</span><span class="p">),</span>
</span><span class='line'>      <span class="err">“</span><span class="n">access_token</span><span class="err">”</span><span class="p">:</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="err">‘</span><span class="n">Keys</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">access_token</span><span class="err">’</span><span class="p">),</span>
</span><span class='line'>      <span class="err">“</span><span class="n">access_token_secret</span><span class="err">”</span><span class="p">:</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="err">‘</span><span class="n">Keys</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">access_token_secret</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">oauth_parameters</span> <span class="o">=</span> <span class="n">get_oauth_parameters</span><span class="p">(</span>
</span><span class='line'>      <span class="n">keys</span><span class="p">[</span><span class="err">‘</span><span class="n">twitter_consumer_key</span><span class="err">’</span><span class="p">],</span>
</span><span class='line'>      <span class="n">keys</span><span class="p">[</span><span class="err">‘</span><span class="n">access_token</span><span class="err">’</span><span class="p">]</span>
</span><span class='line'>  <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">oauth_parameters</span><span class="p">[</span><span class="err">‘</span><span class="n">oauth_signature</span><span class="err">’</span><span class="p">]</span> <span class="o">=</span> <span class="n">generate_signature</span><span class="p">(</span>
</span><span class='line'>      <span class="n">method</span><span class="p">,</span>
</span><span class='line'>      <span class="n">url</span><span class="p">,</span>
</span><span class='line'>      <span class="n">url_parameters</span><span class="p">,</span> <span class="n">oauth_parameters</span><span class="p">,</span>
</span><span class='line'>      <span class="n">keys</span><span class="p">[</span><span class="err">‘</span><span class="n">twitter_consumer_key</span><span class="err">’</span><span class="p">],</span>
</span><span class='line'>      <span class="n">keys</span><span class="p">[</span><span class="err">‘</span><span class="n">twitter_consumer_secret</span><span class="err">’</span><span class="p">],</span>
</span><span class='line'>      <span class="n">keys</span><span class="p">[</span><span class="err">‘</span><span class="n">access_token_secret</span><span class="err">’</span><span class="p">]</span>
</span><span class='line'>  <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="err">‘</span><span class="n">Authorization</span><span class="err">’</span><span class="p">:</span> <span class="n">create_auth_header</span><span class="p">(</span><span class="n">oauth_parameters</span><span class="p">)}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">url</span> <span class="o">+=</span> <span class="err">‘?’</span> <span class="o">+</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlencode</span><span class="p">(</span><span class="n">url_parameters</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="p">),</span> <span class="n">sort_keys</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Next, lets get a collect the 6 key/value pair parameters needed for the <em>Authorization Header</em> and for generating the signature.  These 6 parameters will be used in generating the signature, and then that signature plus these 6 parameters will be used as the <em>Authorization Header</em> for the request.</p>

<dl>
  <dt>oauth_timestamp</dt>
  <dd>Indicates when the request was created</dd>
  <dt>oauth_signature_method</dt>
  <dd>Cryptographic hash function used to sign the request</dd>
  <dt>oauth_version</dt>
  <dd>Oauth version used</dd>
  <dt>oauth_token</dt>
  <dd>The Access Token generated by twitter when a user authorizes a twitter app to access their account</dd>
  <dt>oauth_nonce</dt>
  <dd>A unique token generated per request.  This helps guard against replay attacks</dd>
  <dt>oauth_consumer_key</dt>
  <dd>Identifies which application is making the request</dd>
</dl>

<p>I accomplish this in the <strong>get_oauth_parameters</strong> function.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">get_oauth_parameters</span><span class="p">(</span><span class="n">consumer_key</span><span class="p">,</span> <span class="n">access_token</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“</span><span class="s">&quot;”Returns OAuth parameters needed for making request”””</span>
</span><span class='line'>    <span class="n">oauth_parameters</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="err">‘</span><span class="n">oauth_timestamp</span><span class="err">’</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">())),</span>
</span><span class='line'>        <span class="err">‘</span><span class="n">oauth_signature_method</span><span class="err">’</span><span class="p">:</span> <span class="err">“</span><span class="n">HMAC</span><span class="o">-</span><span class="n">SHA1</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>        <span class="err">‘</span><span class="n">oauth_version</span><span class="err">’</span><span class="p">:</span> <span class="err">“</span><span class="mf">1.0</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>        <span class="err">‘</span><span class="n">oauth_token</span><span class="err">’</span><span class="p">:</span> <span class="n">access_token</span><span class="p">,</span>
</span><span class='line'>        <span class="err">‘</span><span class="n">oauth_nonce</span><span class="err">’</span><span class="p">:</span> <span class="n">get_nonce</span><span class="p">(),</span>
</span><span class='line'>        <span class="err">‘</span><span class="n">oauth_consumer_key</span><span class="err">’</span><span class="p">:</span> <span class="n">consumer_key</span>
</span><span class='line'>    <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">oauth_parameters</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The results of this function will look something like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>  <span class="err">‘</span><span class="n">oauth_nonce</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">NDIzMjg0NTQ5NDI4ODgwNDg3OTg2OTMw</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>  <span class="err">‘</span><span class="n">oauth_timestamp</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="mi">1368365251</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>  <span class="err">‘</span><span class="n">oauth_consumer_key</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">YOUR_CONSUMER_KEY</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>  <span class="err">‘</span><span class="n">oauth_signature_method</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">HMAC</span><span class="o">-</span><span class="n">SHA1</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>  <span class="err">‘</span><span class="n">oauth_version</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="mf">1.0</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>  <span class="err">‘</span><span class="n">oauth_token</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">YOUR_ACCESS_TOKEN</span><span class="err">’</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To get the nonce, I just do this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">get_nonce</span><span class="p">():</span>
</span><span class='line'>    <span class="err">“</span><span class="s">&quot;”Unique token generated for each request”””</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span>
</span><span class='line'>        <span class="err">‘‘</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="nb">str</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">24</span><span class="p">)]))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After collecting the needed parameters, we can go ahead and generate the <em>oauth_signature</em> header value.  The <em>generate_signature</em> method will need the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">oauth_parameters</span><span class="p">[</span><span class="s">&#39;oauth_signature&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">generate_signature</span><span class="p">(</span>
</span><span class='line'>    <span class="n">method</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url_parameters</span><span class="p">,</span> <span class="n">oauth_parameters</span><span class="p">,</span>
</span><span class='line'>    <span class="n">keys</span><span class="p">[</span><span class="s">&#39;twitter_consumer_key&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="n">keys</span><span class="p">[</span><span class="s">&#39;twitter_consumer_secret&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="n">keys</span><span class="p">[</span><span class="s">&#39;access_token_secret&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<dl>
  <dt>method</dt>
  <dd>This will either be a GET or a POST</dd>
  <dt>url</dt>
  <dd>The URL for which the request is directed</dd>
  <dt>url_parameters</dt>
  <dd>Any endpoint specific url_parameters a specific request might need</dd>
  <dt>oauth_paramters</dt>
  <dd>The oauth_parameters we built above</dd>
  <dt>oauth_consumer_key</dt>
  <dd>Your consumer key</dd>
  <dt>oauth_consumer_secret</dt>
  <dd>Your consumer secret</dd>
  <dt>oauth_token_secret</dt>
  <dd>Your access token secret</dd>
  <dt>status</dt>
  <dd>Optional, but if posting a tweet, this needs to be part of the signature</dd>
</dl>

<p>The method looks like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">generate_signature</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">url_parameters</span><span class="p">,</span> <span class="n">oauth_parameters</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">oauth_consumer_key</span><span class="p">,</span> <span class="n">oauth_consumer_secret</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">oauth_token_secret</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“</span><span class="s">&quot;”Create the signature base string”””&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c">#Combine parameters into one hash</span>
</span><span class='line'><span class="n">temp</span> <span class="o">=</span> <span class="n">collect_parameters</span><span class="p">(</span><span class="n">oauth_parameters</span><span class="p">,</span> <span class="n">status</span><span class="p">,</span> <span class="n">url_parameters</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Create string of combined url and oauth parameters</span>
</span><span class='line'><span class="n">parameter_string</span> <span class="o">=</span> <span class="n">stringify_parameters</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Create your Signature Base String</span>
</span><span class='line'><span class="n">signature_base_string</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">method</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="o">+</span> <span class="s">&#39;&amp;amp;&#39;</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">escape</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">url</span><span class="p">))</span> <span class="o">+</span> <span class="s">&#39;&amp;amp;&#39;</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">escape</span><span class="p">(</span><span class="n">parameter_string</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Get the signing key</span>
</span><span class='line'><span class="n">signing_key</span> <span class="o">=</span> <span class="n">create_signing_key</span><span class="p">(</span><span class="n">oauth_consumer_secret</span><span class="p">,</span> <span class="n">oauth_token_secret</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">calculate_signature</span><span class="p">(</span><span class="n">signing_key</span><span class="p">,</span> <span class="n">signature_base_string</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>The first part of this method combines the <em>oauth_parameters</em>, <em>status</em> and <em>url_parameters</em> into a hash, sorts the paramaters alphabetically using a OrderedDict and encodes into a single string.</p>

<p>According to the Twitter documentation, in order to generate the proper sting you need to:</p>

<ul>
  <li>Percent encode every key and value that will be signed</li>
  <li>Sort the list of parameters alphabetically by encoded key</li>
  <li>For each key/value pair:
    <ul>
      <li>Append the encded key to the output string</li>
      <li>Append the ‘=’ character to the output string</li>
      <li>Append the encoded value to the output string</li>
      <li>If there are more key/value pairs remaining, append a ‘&amp;’ character to the output string</li>
    </ul>
  </li>
</ul>

<p>I accomplish this in the <em>stringify_parameters</em> method</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">stringify_parameters</span><span class="p">(</span><span class="n">parameters</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“</span><span class="s">&quot;”Orders parameters, and generates string representation of parameters”””</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="err">‘’</span>
</span><span class='line'>    <span class="n">ordered_parameters</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">ordered_parameters</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">OrderedDict</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">parameters</span><span class="o">.</span><span class="n">items</span><span class="p">()))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">counter</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">ordered_parameters</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">+=</span> <span class="n">escape</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">k</span><span class="p">))</span> <span class="o">+</span> <span class="s">&#39;=&#39;</span> <span class="o">+</span> <span class="n">escape</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">counter</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="nb">len</span><span class="p">(</span><span class="n">ordered_parameters</span><span class="p">):</span>
</span><span class='line'>        <span class="n">output</span> <span class="o">+=</span> <span class="s">&#39;&amp;amp;&#39;</span>
</span><span class='line'>        <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">output</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After we have our stringified parameters, we can create our <em>signature_base_string</em>.  In order to do this we need to:</p>

<ul>
  <li>Conert the HTTP method to uppercase</li>
  <li>Append a ‘&amp;’ character</li>
  <li>Percent Encode the URL and append it to the output string</li>
  <li>Append a ‘&amp;’ character</li>
  <li>Percent encode the parameter string and append it to the output string</li>
</ul>

<p>We are now able to create our signing key and then calculate the signature to put in the <em>Authorization Header</em>.</p>

<p>To create the signing key, we simply need to combine the <em>oauth_consumer_secret</em> and the <em>oauth_token_secret</em> joined by a ‘&amp;’ character.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">create_signing_key</span><span class="p">(</span><span class="n">oauth_consumer_secret</span><span class="p">,</span> <span class="n">oauth_token_secret</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“</span><span class="s">&quot;”Create key to sign request with”””</span>
</span><span class='line'>    <span class="n">signing_key</span> <span class="o">=</span> <span class="n">escape</span><span class="p">(</span><span class="n">oauth_consumer_secret</span><span class="p">)</span> <span class="o">+</span> <span class="err">‘</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">oauth_token_secret</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="n">signing_key</span> <span class="o">+=</span> <span class="n">escape</span><span class="p">(</span><span class="n">oauth_token_secret</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">signing_key</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now that we have the signing_key, we can take that along with the signature_base_string and calculate our SHA1 signature.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">calculate_signature</span><span class="p">(</span><span class="n">signing_key</span><span class="p">,</span> <span class="n">signature_base_string</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“</span><span class="s">&quot;”Calculate the signature using SHA1”””</span>
</span><span class='line'>    <span class="n">hashed</span> <span class="o">=</span> <span class="n">hmac</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">signing_key</span><span class="p">,</span> <span class="n">signature_base_string</span><span class="p">,</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">sig</span> <span class="o">=</span> <span class="n">binascii</span><span class="o">.</span><span class="n">b2a_base64</span><span class="p">(</span><span class="n">hashed</span><span class="o">.</span><span class="n">digest</span><span class="p">())[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">escape</span><span class="p">(</span><span class="n">sig</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>We have our signature, now all that is left is to create our <em>Authorization Header</em> for the request and make our request.  In order to properly create the header, we need to combine our 6 parameters from the <em>get_oauth_parameters</em> with the signature we just created, order them alphabetically and append them to a string beginning with “OAuth”.  The key/value parameters will need to be separated by a ‘=’, they will both need to be percent encoded and the values enclosed in ‘”’.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">create_auth_header</span><span class="p">(</span><span class="n">parameters</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“</span><span class="s">&quot;”For all collected parameters, order them and create auth header”””</span>
</span><span class='line'>    <span class="n">ordered_parameters</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">ordered_parameters</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">OrderedDict</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">parameters</span><span class="o">.</span><span class="n">items</span><span class="p">()))</span>
</span><span class='line'>    <span class="n">auth_header</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>        <span class="err">‘</span><span class="o">%</span><span class="n">s</span><span class="o">=</span><span class="err">”</span><span class="o">%</span><span class="n">s</span><span class="err">”’</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">ordered_parameters</span><span class="o">.</span><span class="n">iteritems</span><span class="p">())</span>
</span><span class='line'>    <span class="n">val</span> <span class="o">=</span> <span class="err">“</span><span class="n">OAuth</span> <span class="err">“</span> <span class="o">+</span> <span class="err">‘</span><span class="p">,</span> <span class="err">‘</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">auth_header</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">val</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We should now be able to make our request:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="err">‘</span><span class="n">Authorization</span><span class="err">’</span><span class="p">:</span> <span class="n">create_auth_header</span><span class="p">(</span><span class="n">oauth_parameters</span><span class="p">)}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">url</span> <span class="o">+=</span> <span class="s">&#39;?&#39;</span> <span class="o">+</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlencode</span><span class="p">(</span><span class="n">url_parameters</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="p">),</span> <span class="n">sort_keys</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>Feel free to email me with any questions or comments.  The git repo for this is located <a href="https://github.com/kelsmj/twitter_signature">here</a></p>
]]></content>
  </entry>
  
</feed>
